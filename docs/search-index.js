var searchIndex = JSON.parse('{\
"rustunnel":{"doc":"<code>rustunnel</code> is a sandboxed TLS tunnel library.","t":[3,3,11,11,11,11,11,11,11,11,0,11,11,11,11,0,0,0,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["ClientChild","ServerChild","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","logger","new","new","run","run","sandbox","stream","tls","try_from","try_from","try_into","try_into","type_id","type_id","Logger","borrow","borrow_mut","enabled","flush","from","into","level","log","parse_line","try_from","try_into","type_id","close_all_fds","ProxyPipeStream","borrow","borrow_mut","drop","flush","from","into","new","read","stdio","try_from","try_into","type_id","write","AcceptInvalid","CaCertificate","Custom","Hostname","Identity","System","TlsHostname","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","from_pem","from_pkcs12","from_pkcs12_file","into","into","into","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","x509","0"],"q":["rustunnel","","","","","","","","","","","","","","","","","","","","","","","","rustunnel::logger","","","","","","","","","","","","","rustunnel::sandbox","rustunnel::stream","","","","","","","","","","","","","","rustunnel::tls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustunnel::tls::CaCertificate","rustunnel::tls::TlsHostname"],"d":["A sandboxed TLS initiator.","A sandboxed TLS acceptor.","","","","","","","","","Logging utilities for use with a sandboxed process.","Constructs a new <code>ServerChild</code>.","Constructs a new <code>ClientChild</code>.","Accepts a TLS connection in a process sandbox.","Initiates a TLS connection in a process sandbox.","Process sandbox utilities.","Streams for use with sandboxed TLS connections.","TLS-related types.","","","","","","","An implementation of <code>log::Log</code> suitable for use with …","","","","","","","The maximum log level to output.","","Parse a log line printed by <code>Logger</code> into a <code>log::Level</code> and a …","","","","Closes all file descriptors except for those in <code>keep_fds</code>.","A <code>Read</code>/<code>Write</code> stream used for the plaintext end of a …","","","","","","","Constructs a new <code>ProxyPipeStream</code> from two <code>RawFd</code>s for …","","Constructs a new <code>ProxyPipeStream</code> from the standard input …","","","","","Accept any hostname.","A TLS CA certificate specification.","Accept an openssl <code>X509</code> CA certificate.","Accept one specific hostname.","A TLS identity, comprised of a certificate and private key.","Accept any CA certificates in the system’s CA …","A TLS hostname specification.","","","","","","","","","","Constructs a <code>CaCertificate::Custom</code> from PEM <code>data</code>.","Constructs a new <code>Identity</code> from PKCS#12 <code>data</code> encrypted with …","Constructs a new <code>Identity</code> from a PKCS#12 file at <code>path</code> …","","","","Constructs a new <code>TlsHostname</code> from a <code>String</code>.","","","","","","","","","","The openssl <code>X509</code> CA certificate to trust.",""],"i":[0,0,1,2,1,2,1,2,1,2,0,1,2,1,2,0,0,0,1,2,1,2,1,2,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,5,0,6,5,0,6,0,5,7,6,5,7,6,5,7,6,6,7,7,5,7,6,5,5,7,6,5,7,6,5,7,6,8,9],"f":[null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["tcpstream",3],["identity",3],["proxypipestream",3],["cacertificate",4]],[["result",4,["error"]],["error",3]]],[[["tcpstream",3],["option",4,["identity"]],["vec",3,["cacertificate"]],["tlshostname",4],["identity",3],["cacertificate",4],["proxypipestream",3]],[["result",4,["error"]],["error",3]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["metadata",3]],["bool",15]],[[]],[[]],[[]],null,[[["record",3]]],[[["str",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["btreeset",3]],[["error",3],["result",4,["error"]]]],null,[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[["rawfd",6]],["result",6]],[[],[["usize",15],["result",6,["usize"]]]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["usize",15],["result",6,["usize"]]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",3]]],[[["str",15]],[["result",4,["error"]],["error",3]]],[[["str",15],["path",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[["string",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[3,"ServerChild"],[3,"ClientChild"],[3,"Logger"],[3,"ProxyPipeStream"],[4,"TlsHostname"],[4,"CaCertificate"],[3,"Identity"],[13,"Custom"],[13,"Hostname"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};